'''
作者:lg
日期:2019/9/15
文件描述:命名空间与作用域相关
缺陷：
'''

# 命名空间 有三种
# 内置命名空间 —— python解释器
# 就是python解释器一启动就可以使用的名字存储在内置命名空间中
# 内置的名字在启动解释器的时候被加载进内存里
# 全局命名空间 —— 我们写的代码但不是函数中的代码
# 是在程序从上到下被执行的过程中依次加载进内存的
# 放置了我们设置的所有变量名和函数名
# 局部命名空间 —— 函数
# 就是函数内部定义的名字
# 当调用函数的时候 才会产生这个名称空间 随着函数执行的结束 这个命名空间就又消失了


# 命名空间里变量加载顺序与取值顺序
# 依赖倒置原则!!!!!
# 访问时,先从当前命名空间里找,找到了就使用,找不到则从上一级命名空间里找,如果一直找不到就会报错

# 作用域两种
# 全局作用域 —— 作用在全局 —— 内置和全局名字空间中的名字都属于全局作用域  ——globals()
# 局部作用域 —— 作用在局部 —— 函数（局部名字空间中的名字属于局部作用域） ——locals()

# global用法
a = 100


def func1():
    global a
    a = 900


print(a)

# 在函数里把变量声明为global,表示这个变量是一个全局变量,来进行修改
# 1 如果是修改列表,字典等可变数据类型,则不需要global声明; 2 如果只是访问,则不需要global声明
# 注意:为了函数安全,尽量少使用global,因为如果调用别人写的函数,如果该函数global的一个变量名与自己代码里有相同的变量名
# 那么这个变量不知道什么时候会被改变

# locals表示当前命名空间里的变量
# globals表示全局命名空间里的变量


# 函数嵌套
# 函数嵌套里一个应用
a = 10
def outer():
    a = 30
    def inner1():
        def inner2():
            nonlocal a
            a += 5
        inner2()
    inner1()
    print('局部a',a)
outer()

print('全局a',a)
# 当要从内部函数里修改外部函数的一个变量,需要使用nonlocal声明,不能使用local,因为local是只能作用全局变量里的
# nonlocal只能作用域局部变量,并且只会向外层找第一个变量,不会对更外层的有影响
# 该情况通常发生在函数嵌套里


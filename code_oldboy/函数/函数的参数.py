'''
作者:lg
日期:2019/9/8
文件描述:函数的参数
缺陷：
'''


# 函数的参数
# 形参：
#     位置参数 ： 必须传
#     *args ：可以接收任意多个位置参数
#     默认参数 ： 可以不传
#     **kwargs ： 可以接收多个关键字参数
# 实参：按照位置传参，按照关键字传参

# 传参顺序
#   位置参数-->*args-->默认参数-->**kwargs
#            |                   |
#            |                   |
#          位置参数             关键词参数

# 举例
def func(a, b, *args, c=10, d=20, **kwargs):
    dic = {'e': 578}
    print(a, b)
    print(args)
    print(c, d)
    print(kwargs)
    for k, v in kwargs.items():
        print(k, v)
    print('OK')


func(1, 10, *[1, 23, 34], c=9, d=21, e=90, f=89)


#    '*' :在形参实参或者函数里都表示拆包的含义   !!!!!

# 默认参数是可变类型时的陷阱
def func1(l=[]):
    print('id = ', id(l))
    l.append('ABC')
    print(l)


func1()
func1()
func1()
# 打印结果:
# id =  2265491375624
# ['ABC']
# id =  2265491375624
# ['ABC', 'ABC']
# id =  2265491375624
# ['ABC', 'ABC', 'ABC']

# 分析:
# 如果 可变 的数据类型作为 默认参数,如果不传值,那么每一次调用该函数的时候都共用这个数据类型的资源


# 扩展
dic1 = {'A': 123234, 'B': 1123123}
dic2 = dic1
dic1.setdefault('C', 34343)
print('dic2', dic2)
# 打印结果 dic2 {'A': 123234, 'B': 1123123, 'C': 34343}

# 分析总结:
# 对于可变数据类型用等于号赋值时,那么新变量和旧变量是指向同一块内存地址的
# 函数形参用'等于号'把可变数据类型赋值给变量时,函数记住这个变量的内存地址了.该变量存的是一个地址,指向一个列表

// 函数
// 普通函数定义
function f1() {
    console.log("Hello world!");
}

// 带参数的函数
// 内置的arguments对象:是一个列表,里面包含所有传入的参数
function f2(a, b) {
    console.log(arguments);
    console.log(arguments.length);
    console.log(a, b);
}

// 带返回值的函数
function sum(a, b) {
    return a + b;
}

sum(1, 2);  // 调用函数

// 匿名函数方式
var sum = function (a, b) {
    return a + b;
};
sum(1, 2);

// 立即执行函数
(function (a, b) {
    return a + b
})(18, 19);
// 立即执行函数理解:
// 第一步:先写两个括号   ()()
// 第二步:在第一个括号写定义,第二个括号写实参

// 函数的全局变量和局部变量
// 局部变量：
// 在JavaScript函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它（该变量的作用域是函数内部）。只要函数运行完毕，本地变量就会被删除。

// 全局变量：
// 在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。

// 变量生存周期：
// JavaScript变量的生命期从它们被声明的时间开始。
// 局部变量会在函数运行以后被删除。
// 全局变量会在页面关闭后被删除。

// 作用域
// 首先在函数内部查找变量，找不到则到外层函数查找，逐步找到最外层。


// 词法分析（尝试理解）
// JavaScript中在调用函数的那一瞬间，会先进行词法分析。

// 词法分析的过程：
// 当函数调用的前一瞬间，会先形成一个激活对象：Avtive Object（AO），并会分析以下3个方面：
// 1:函数参数，如果有，则将此参数赋值给AO，且值为undefined。如果没有，则不做任何操作。
// 2:函数局部变量，如果AO上有同名的值，则不做任何操作。如果没有，则将此变量赋值给AO，并且值为undefined。
// 3:函数声明，如果AO上有，则会将AO上的对象覆盖。如果没有，则不做任何操作。

// 函数内部无论是使用参数还是使用局部变量都到AO上找!!!!!
console.log("词法分析~~~~");
// var age = 18;
//
// function foo() {
//     console.log(age);
//     var age = 22;
//     console.log(age);
// }
//
// foo();  // 问：执行foo()之后的结果是？

var age = 18;

function foo() {
    console.log(age);
    var age = 22;
    console.log(age);

    function age() {
        console.log("呵呵");
    }

    console.log(age);
}

foo();  // 执行后的结果是？
// 注意:这里有一个很混淆人的概念,本以为在函数里定义了一个同变量名的函数,命名空间会被覆盖
// 但是,对于js是另一个用法,变量名只有词法分析时AE对象造成改变,或者直接赋值也会改变,总共两种方式!!!

// 词法分析总结:
// 1. 分析(分析的函数内部变量定义过程)
//     1. 先看参数
//     2. 看有没有局部变量
//     3. 看有没有函数定义
// 2. 执行(实际执行代码)